@inject SignInManager<IdentityUser> SignInManager
@{
    var hasExternalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).Any();
}

<a class="waves-effect amber darken-3 btn @ManageNavPages.IndexNavClass(ViewContext)" id="profile" asp-page="./Index">Profil</a>
<a class="waves-effect amber darken-3 btn @ManageNavPages.EmailNavClass(ViewContext)" id="email" asp-page="./Email">Zmiana adresu e-mail</a>
<a class="waves-effect amber darken-3 btn @ManageNavPages.ChangePasswordNavClass(ViewContext)" id="change-password" asp-page="./ChangePassword">Zmiana hasła</a>
    @*@if (hasExternalLogins)
    {
        <li id="external-logins" class="nav-item"><a id="external-login" class="nav-link @ManageNavPages.ExternalLoginsNavClass(ViewContext)" asp-page="./ExternalLogins">Zewnętrzne serwisy</a></li>
    }
<a class="waves-effect amber darken-3 btn @ManageNavPages.TwoFactorAuthenticationNavClass(ViewContext)" id="two-factor" asp-page="./TwoFactorAuthentication">Dwu-etapowa weryfikacja</a>*@
<a class="waves-effect amber darken-3 btn @ManageNavPages.PersonalDataNavClass(ViewContext)" id="personal-data" asp-page="./PersonalData">Zarządzanie kontem</a>

